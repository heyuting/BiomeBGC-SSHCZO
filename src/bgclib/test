bgc.c:			growth season, as defined by the remdays_curgrowth flag.  This
bgc.c:			keeps the occurrence of new growth consistent with the treatment
bgc.c:			if (ok && cs.leafc && phen.remdays_curgrowth && metv.dayl)
bgc.c:			current growth day, because the competition between decomp
bgc.c:			immobilization fluxes and plant growth N demand is resolved
bgc.c:			here.  On days with no growth, no allocation occurs, but
bgc.c:			/* daily growth respiration */
bgc.c:			if (ok && growth_resp(&epc, &cf))
bgc.c:				bgc_printf(BV_ERROR, "Error in daily_growth_resp() from bgc.c\n");
bgc.c:			bgc_printf(BV_DIAG, "%d\t%d\tdone growth_resp\n",simyr,yday);
daily_allocation.c:	double g1;          /* RATIO   C respired for growth : C grown  */ 
daily_allocation.c:	double g2;          /* proportion of growth resp to release at fixation */
daily_allocation.c:	double pnow;        /* proportion of growth displayed on current day */ 
daily_allocation.c:			new growth and storage. Remember that fluxes in
daily_allocation.c:		pnow = epc->alloc_prop_curgrowth;
daily_allocation.c:                pnow = epc->alloc_prop_curgrowth;
daily_allocation.c:	determine how much N is required to meet this potential growth
daily_allocation.c:	growth N demands against the available soil mineral N pool. */
daily_allocation.c:		plant growth demands, so these two demands compete for available
daily_allocation.c:	growth and storage pools */
daily_allocation.c:	/* pnow is the proportion of this day's growth that is displayed now,
daily_allocation.c:	/* daily C fluxes out of cpool and into new growth or storage */
daily_allocation.c:	/* daily N fluxes out of npool and into new growth or storage */
daily_allocation.c:	/* calculate the amount of carbon that needs to go into growth
daily_allocation.c:	respiration storage to satisfy all of the storage growth demands. 
daily_allocation.c:	allow for the fraction of growth respiration tha2-t is released at the
daily_allocation.c:	release at the time of display. Note that all the growth respiration
daily_allocation.c:	fluxes that get released on a given day are calculated in growth_resp(),
daily_allocation.c:	but that the storage of C for growth resp during display of transferred
daily_allocation.c:	growth is assigned here. */
daily_allocation_cp.c:	double g1;          /* RATIO   C respired for growth : C grown  */ 
daily_allocation_cp.c:	double g2;          /* proportion of growth resp to release at fixation */
daily_allocation_cp.c:	double pnow;        /* proportion of growth displayed on current day */ 
daily_allocation_cp.c:			new growth and storage. Remember that fluxes in
daily_allocation_cp.c:	pnow = epc->alloc_prop_curgrowth;
daily_allocation_cp.c:	determine how much N is required to meet this potential growth
daily_allocation_cp.c:	growth N demands against the available soil mineral N pool. */
daily_allocation_cp.c:		plant growth demands, so these two demands compete for available
daily_allocation_cp.c:	growth and storage pools */
daily_allocation_cp.c:	/* pnow is the proportion of this day's growth that is displayed now,
daily_allocation_cp.c:	/* daily C fluxes out of cpool and into new growth or storage */
daily_allocation_cp.c:	/* daily N fluxes out of npool and into new growth or storage */
daily_allocation_cp.c:	/* calculate the amount of carbon that needs to go into growth
daily_allocation_cp.c:	respiration storage to satisfy all of the storage growth demands. 
daily_allocation_cp.c:	allow for the fraction of growth respiration tha2-t is released at the
daily_allocation_cp.c:	release at the time of display. Note that all the growth respiration
daily_allocation_cp.c:	fluxes that get released on a given day are calculated in growth_resp(),
daily_allocation_cp.c:	but that the storage of C for growth resp during display of transferred
daily_allocation_cp.c:	growth is assigned here. */
dayphen.c:	phen->remdays_curgrowth = (double)(phenarr->remdays_curgrowth[metday]);
decomp.c:	to allow competition between immobilization fluxes and plant growth
firstday.c:	/* establish the initial partitioning between displayed growth
firstday.c:	and growth ready for transfer */
firstday.c:		transfer growth this year */
firstday.c:	/* add the growth respiration requirement for the first year's
firstday.c:	leaf and fine root growth from transfer pools to the 
growth_resp.c:growth_resp.c
growth_resp.c:daily growth respiration rates
growth_resp.c:int growth_resp(epconst_struct* epc, cflux_struct* cf)
growth_resp.c:	double g1;   /* RATIO   C respired for growth : C grown  */ 
growth_resp.c:	double g2;   /* proportion of growth resp to release at fixation */
growth_resp.c:	/* leaf and fine root growth respiration for both trees and grass */	
growth_resp.c:	/* woody tissue growth respiration only for trees */
output_map_init.c:		output_map[480] = &phen->remdays_curgrowth;
phenology.c:		/* transfer growth fluxes */
phenology.c:		/* check for days left in transfer growth period */
phenology.c:		/* transfer growth fluxes */
phenology.c:		/* check for days left in transfer growth period */
prephenology.c:	int ngrowthdays,ntransferdays,nlitfalldays;
prephenology.c:	int remdays_curgrowth[365];
prephenology.c:	if (ok && !(phen->remdays_curgrowth = (int*) malloc(ndays*sizeof(int))))
prephenology.c:		bgc_printf(BV_ERROR, "Error allocating for phen->curgrowth, prephenology()\n");
prephenology.c:			remdays_curgrowth[pday] = 0;
prephenology.c:			growth, for simulations of bare ground */
prephenology.c:				remdays_curgrowth[pday] = 0;
prephenology.c:		} /* end if special no-growth signal */
prephenology.c:			/* normal growth */
prephenology.c:				ngrowthdays = offday - onday;
prephenology.c:				as proportions of number of growth days, as specified by user.
prephenology.c:				ngrowthdays */
prephenology.c:				t1 = epc->transfer_pdays * (double)ngrowthdays;
prephenology.c:				if (ntransferdays > ngrowthdays) ntransferdays = ngrowthdays;
prephenology.c:				t1 = epc->litfall_pdays * (double)ngrowthdays;
prephenology.c:				if (nlitfalldays > ngrowthdays) nlitfalldays = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:				counter = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = counter;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:				and current growth signals.  Treatment is the same for woody and
prephenology.c:					remdays_curgrowth[pday] = 365-pday;
prephenology.c:		} /* end else normal growth */
prephenology.c:						phen->remdays_curgrowth[pday-182] = remdays_curgrowth[pday];
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:					phen->remdays_curgrowth[py*365+pday] = remdays_curgrowth[pday];
prephenology.c:					start of the new growth period, instead of the middle of
prephenology.c:					the new growth period, as is used in the White et al. ms. */
prephenology.c:					/* leaves never got turned on, this is a non-growth
prephenology.c:					start of the new growth period, instead of the middle of
prephenology.c:					the new growth period, as is used in the White et al. ms. */
prephenology.c:					/* leaves never got turned on, this is a non-growth
prephenology.c:				remdays_curgrowth[pday] = 0;
prephenology.c:				growth */
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:			} /* end if special no-growth signal */
prephenology.c:				/* normal growth year */
prephenology.c:				ngrowthdays = offday - onday;
prephenology.c:				if (ngrowthdays < 1)
prephenology.c:					bgc_printf(BV_ERROR, "FATAL ERROR: ngrowthdays < 1\n");
prephenology.c:					bgc_printf(BV_ERROR, "ngrowthdays = %d\n",ngrowthdays);
prephenology.c:				as proportions of number of growth days, as specified by user.
prephenology.c:				ngrowthdays */
prephenology.c:				t1 = epc->transfer_pdays * (double)ngrowthdays;
prephenology.c:				if (ntransferdays > ngrowthdays) ntransferdays = ngrowthdays;
prephenology.c:				t1 = epc->litfall_pdays * (double)ngrowthdays;
prephenology.c:				if (nlitfalldays > ngrowthdays) nlitfalldays = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:				counter = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = counter;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:			} /* end else normal growth year */
prephenology.c:						phen->remdays_curgrowth[pday-182] = remdays_curgrowth[pday];
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:					phen->remdays_curgrowth[py*365+pday] = remdays_curgrowth[pday];
prephenology.c:	free(phen->remdays_curgrowth);
state_update.c:	/* leaf and fine root transfer growth */
state_update.c:		/* Stem and coarse root transfer growth */
state_update.c:	/* Daily allocation for transfer growth respiration */
state_update.c:	/* Daily growth respiration fluxes */
state_update.c:	/* Leaf growth respiration */
state_update.c:	/* Fine root growth respiration */
state_update.c:		/* Live stem growth respiration */ 
state_update.c:		/* Dead stem growth respiration */ 
state_update.c:		/* Live coarse root growth respiration */ 
state_update.c:		/* Dead coarse root growth respiration */ 
state_update.c:		allocation of excess C and N show up as new growth in the next growing
state_update.c:	/* Leaf and fine root transfer growth */
state_update.c:		/* Stem and coarse root transfer growth */
state_update.c:		allocation of excess C and N show up as new growth in the next growing
summary.c:	/* calculate daily NPP, positive for net growth */
baresoil_evap.c:	/* correct conductances for temperature and pressure based on Jones (1992)
bgc.c:	/* calculate the annual average air temperature for use in soil 
bgc.c:	temperature corrections. This code added 9 February 1999, in
bgc.c:	conjunction with soil temperature testing done with Mike White. */
bgc.c:			/* soil temperature correction using difference from
bgc.c:			/* daily maintenance respiration */
bgc.c:			growth season, as defined by the remdays_curgrowth flag.  This
bgc.c:			keeps the occurrence of new growth consistent with the treatment
bgc.c:			if (ok && cs.leafc && phen.remdays_curgrowth && metv.dayl)
bgc.c:			current growth day, because the competition between decomp
bgc.c:			immobilization fluxes and plant growth N demand is resolved
bgc.c:			here.  On days with no growth, no allocation occurs, but
bgc.c:			/* daily growth respiration */
bgc.c:			if (ok && growth_resp(&epc, &cf))
bgc.c:				bgc_printf(BV_ERROR, "Error in daily_growth_resp() from bgc.c\n");
bgc.c:			bgc_printf(BV_DIAG, "%d\t%d\tdone growth_resp\n",simyr,yday);
bgc.c:	/* available for spin and go operation.  WMJ 3/16/2005 */
bgc_io.c:		/* 	Conversion to Upper case allows to use strncmp() instead of strncasecmp 
bgc_io.c:			keyword[i] = toupper(keyword[i]);
canopy_et.c:	/* temperature and pressure correction factor for conductances */
canopy_et.c:	m_ppfd_sun = metv->ppfd_per_plaisun/(PPFD50 + metv->ppfd_per_plaisun);
canopy_et.c:	m_ppfd_shade = metv->ppfd_per_plaishade/(PPFD50 + metv->ppfd_per_plaishade);
canopy_et.c:	/* freezing night minimum temperature multiplier */
canopy_et.c:	/* Leaf conductance to evaporated water vapor, per unit projected LAI */
canopy_et.c:	/* Leaf conductance to transpired water vapor, per unit projected
canopy_et.c:	/* Leaf conductance to sensible heat, per unit all-sided LAI */
canopy_et.c:			pmet_in.irad = metv->swabs_per_plaisun;
canopy_et.c:			pmet_in.irad = metv->swabs_per_plaishade;
canopy_et.c:		pmet_in.irad = metv->swabs_per_plaisun;
canopy_et.c:		pmet_in.irad = metv->swabs_per_plaishade;
canopy_et.c:    For output in units of (kg/m2/s)  out_flag = 0
canopy_et.c:    For output in units of (W/m2)     out_flag = 1
canopy_et.c:    in->ta     (deg C)   air temperature
canopy_et.c:    double dt = 0.2;     /* set the temperature offset for slope calculation */
canopy_et.c:    /* calculate density of air (rho) as a function of air temperature */
canopy_et.c:    /* calculate temperature offsets for slope estimate */
daily_allocation.c:	heterotrophic respiration fractions now coming from bgc_conbstants.h
daily_allocation.c:	double day_mresp;   /* daily total maintenance respiration */
daily_allocation.c:	double g1;          /* RATIO   C respired for growth : C grown  */ 
daily_allocation.c:	double g2;          /* proportion of growth resp to release at fixation */
daily_allocation.c:	double pnow;        /* proportion of growth displayed on current day */ 
daily_allocation.c:	gross production and maintenance respiration costs */
daily_allocation.c:			new growth and storage. Remember that fluxes in
daily_allocation.c:		pnow = epc->alloc_prop_curgrowth;
daily_allocation.c:                pnow = epc->alloc_prop_curgrowth;
daily_allocation.c:	determine how much N is required to meet this potential growth
daily_allocation.c:	growth N demands against the available soil mineral N pool. */
daily_allocation.c:		plant growth demands, so these two demands compete for available
daily_allocation.c:	growth and storage pools */
daily_allocation.c:	/* pnow is the proportion of this day's growth that is displayed now,
daily_allocation.c:	/* daily C fluxes out of cpool and into new growth or storage */
daily_allocation.c:	/* daily N fluxes out of npool and into new growth or storage */
daily_allocation.c:	/* calculate the amount of carbon that needs to go into growth
daily_allocation.c:	respiration storage to satisfy all of the storage growth demands. 
daily_allocation.c:	allow for the fraction of growth respiration tha2-t is released at the
daily_allocation.c:	release at the time of display. Note that all the growth respiration
daily_allocation.c:	fluxes that get released on a given day are calculated in growth_resp(),
daily_allocation.c:	but that the storage of C for growth resp during display of transferred
daily_allocation.c:	growth is assigned here. */
daily_allocation.c:	/* respiration fractions for fluxes between compartments */
daily_allocation_cp.c:	heterotrophic respiration fractions now coming from bgc_conbstants.h
daily_allocation_cp.c:	double day_mresp;   /* daily total maintenance respiration */
daily_allocation_cp.c:	double g1;          /* RATIO   C respired for growth : C grown  */ 
daily_allocation_cp.c:	double g2;          /* proportion of growth resp to release at fixation */
daily_allocation_cp.c:	double pnow;        /* proportion of growth displayed on current day */ 
daily_allocation_cp.c:	gross production and maintenance respiration costs */
daily_allocation_cp.c:			new growth and storage. Remember that fluxes in
daily_allocation_cp.c:	pnow = epc->alloc_prop_curgrowth;
daily_allocation_cp.c:	determine how much N is required to meet this potential growth
daily_allocation_cp.c:	growth N demands against the available soil mineral N pool. */
daily_allocation_cp.c:		plant growth demands, so these two demands compete for available
daily_allocation_cp.c:	growth and storage pools */
daily_allocation_cp.c:	/* pnow is the proportion of this day's growth that is displayed now,
daily_allocation_cp.c:	/* daily C fluxes out of cpool and into new growth or storage */
daily_allocation_cp.c:	/* daily N fluxes out of npool and into new growth or storage */
daily_allocation_cp.c:	/* calculate the amount of carbon that needs to go into growth
daily_allocation_cp.c:	respiration storage to satisfy all of the storage growth demands. 
daily_allocation_cp.c:	allow for the fraction of growth respiration tha2-t is released at the
daily_allocation_cp.c:	release at the time of display. Note that all the growth respiration
daily_allocation_cp.c:	fluxes that get released on a given day are calculated in growth_resp(),
daily_allocation_cp.c:	but that the storage of C for growth resp during display of transferred
daily_allocation_cp.c:	growth is assigned here. */
daily_allocation_cp.c:	/* respiration fractions for fluxes between compartments */
daymet.c:	/* air temperature calculations (all temperatures deg C) */
daymet.c:	average temperature is used as the soil temperature at 10 cm.
dayphen.c:	phen->remdays_curgrowth = (double)(phenarr->remdays_curgrowth[metday]);
decomp.c:	/* calculate the rate constant scalar for soil temperature,
decomp.c:	Lloyd, J., and J.A. Taylor, 1994. On the temperature dependence of 
decomp.c:	soil respiration. Functional Ecology, 8:315-323.
decomp.c:	temperature from 10 C to 25 C, since most of the microcosm studies
decomp.c:	Orchard, V.A., and F.J. Cook, 1983. Relationship between soil respiration
decomp.c:	/* calculate the final rate scalar as the product of the temperature and
decomp.c:	/* respiration fractions for fluxes between compartments */
decomp.c:	to allow competition between immobilization fluxes and plant growth
firstday.c:	/* establish the initial partitioning between displayed growth
firstday.c:	and growth ready for transfer */
firstday.c:		/* perform these transfers */
firstday.c:		transfer growth this year */
firstday.c:	/* add the growth respiration requirement for the first year's
firstday.c:	leaf and fine root growth from transfer pools to the 
growth_resp.c:growth_resp.c
growth_resp.c:daily growth respiration rates
growth_resp.c:int growth_resp(epconst_struct* epc, cflux_struct* cf)
growth_resp.c:	double g1;   /* RATIO   C respired for growth : C grown  */ 
growth_resp.c:	double g2;   /* proportion of growth resp to release at fixation */
growth_resp.c:	/* leaf and fine root growth respiration for both trees and grass */	
growth_resp.c:	/* woody tissue growth respiration only for trees */
maint_resp.c:daily maintenance respiration
maint_resp.c:	maintenance respiration routine
maint_resp.c:	tissue N content and respiration rate given in:
maint_resp.c:	Ryan, M.G., 1991. Effects of climate change on plant respiration.
maint_resp.c:	From Ryan's figures and regressions equations, the maintenance respiration
maint_resp.c:	in kgC/day per kg of tissue N is:
maint_resp.c:	mrpern = 0.218 (kgC/kgN/d)
maint_resp.c:	Leaf maintenance respiration is calculated separately for day and
maint_resp.c:	Leaf and fine root respiration are dependent on phenology.
maint_resp.c:	double mrpern = 0.218;
maint_resp.c:	/* leaf day and night maintenance respiration when leaves on */
maint_resp.c:		t1 = ns->leafn * mrpern;
maint_resp.c:		/* for day respiration, also determine rates of maintenance respiration
maint_resp.c:		per unit of projected leaf area in the sunlit and shaded portions of
maint_resp.c:		/* first, calculate the mass of N per unit of projected leaf area
maint_resp.c:		/* convert to respiration flux in kg C/m2 projected area/day, and
maint_resp.c:		correct for temperature */
maint_resp.c:		dlmr_area_sun   = n_area_sun * mrpern * pow(q10, exponent);
maint_resp.c:		dlmr_area_shade = n_area_shade * mrpern * pow(q10, exponent);
maint_resp.c:		/* finally, convert from mass to molar units, and from a daily rate to 
maint_resp.c:		a rate per second */
maint_resp.c:	/* fine root maintenance respiration when fine roots on */
maint_resp.c:		cf->froot_mr = ns->frootn * mrpern * t1;
maint_resp.c:		/* live stem maintenance respiration */
maint_resp.c:		cf->livestem_mr = ns->livestemn * mrpern * t1;
maint_resp.c:		/* live coarse root maintenance respiration */
maint_resp.c:		cf->livecroot_mr = ns->livecrootn * mrpern * t1;
output_map_init.c:		output_map[11] = &metv->swabs_per_plaisun;
output_map_init.c:		output_map[12] = &metv->swabs_per_plaishade;
output_map_init.c:		output_map[13] = &metv->ppfd_per_plaisun;
output_map_init.c:		output_map[14] = &metv->ppfd_per_plaishade;
output_map_init.c:		output_map[480] = &phen->remdays_curgrowth;
phenology.c:		/* transfer growth fluxes */
phenology.c:		/* check for days left in transfer growth period */
phenology.c:			compartment by the end of transfer period, at approximately a
phenology.c:		/* transfer growth fluxes */
phenology.c:		/* check for days left in transfer growth period */
phenology.c:			period */
phenology.c:		litterfall period, with a linearly ramping removal rate. assumes that
photosynthesis.c:	/* This function is a wrapper and replacement for the photosynthesis code which used
photosynthesis.c:	psn_sun->ppfd = metv->ppfd_per_plaisun;
photosynthesis.c:		needs to have the maintenance respiration rate added, this
photosynthesis.c:	psn_shade->ppfd = metv->ppfd_per_plaishade;
photosynthesis.c:		needs to have the maintenance respiration rate added, this
photosynthesis.c:	t          (deg C) air temperature
photosynthesis.c:	lnc        (kg Nleaf/m2) leaf N concentration, per unit projected LAI 
photosynthesis.c:	ppfd       (umol photons/m2/s) PAR flux density, per unit projected LAI
photosynthesis.c:	Note that these values are given in the units used in the paper, and that
photosynthesis.c:	they are converted to units appropriate to the rest of this function before
photosynthesis.c:	double t;      /* (deg C) temperature */
photosynthesis.c:	double tk;     /* (K) absolute temperature */
photosynthesis.c:	double ppe;    /* (mol/mol) photons absorbed by PSII per e- transported */
photosynthesis.c:	/* correct kinetic constants for temperature, and do unit conversions */
photosynthesis.c:		109 species. Journal of Experimental Botany, 44:907-920.
prcp_route.c:	(kg intercepted/kg rain/unit all-sided LAI/day) */
prephenology.c:	int ngrowthdays,ntransferdays,nlitfalldays;
prephenology.c:	int remdays_curgrowth[365];
prephenology.c:	if (ok && !(phen->remdays_curgrowth = (int*) malloc(ndays*sizeof(int))))
prephenology.c:		bgc_printf(BV_ERROR, "Error allocating for phen->curgrowth, prephenology()\n");
prephenology.c:			remdays_curgrowth[pday] = 0;
prephenology.c:			growth, for simulations of bare ground */
prephenology.c:				remdays_curgrowth[pday] = 0;
prephenology.c:		} /* end if special no-growth signal */
prephenology.c:			/* normal growth */
prephenology.c:				ngrowthdays = offday - onday;
prephenology.c:				/* define the length of the transfer and litfall periods */
prephenology.c:				as proportions of number of growth days, as specified by user.
prephenology.c:				ngrowthdays */
prephenology.c:				t1 = epc->transfer_pdays * (double)ngrowthdays;
prephenology.c:				if (ntransferdays > ngrowthdays) ntransferdays = ngrowthdays;
prephenology.c:				t1 = epc->litfall_pdays * (double)ngrowthdays;
prephenology.c:				if (nlitfalldays > ngrowthdays) nlitfalldays = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:				counter = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = counter;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:				and current growth signals.  Treatment is the same for woody and
prephenology.c:					remdays_curgrowth[pday] = 365-pday;
prephenology.c:		} /* end else normal growth */
prephenology.c:		/* now copy this year multiple times to the permanent phenology struct
prephenology.c:					year to the permanent phenology array */
prephenology.c:						phen->remdays_curgrowth[pday-182] = remdays_curgrowth[pday];
prephenology.c:					year to the permanent phenology array */
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:					phen->remdays_curgrowth[py*365+pday] = remdays_curgrowth[pday];
prephenology.c:		handled by the White et al. paper */
prephenology.c:					start of the new growth period, instead of the middle of
prephenology.c:					the new growth period, as is used in the White et al. ms. */
prephenology.c:					end of the litterfall period, instead of the middle
prephenology.c:					/* leaves never got turned on, this is a non-growth
prephenology.c:			/* calculate the long-term average annual high temperature
prephenology.c:				/* do averaging operations on grass_prcpyear and grass_tminyear,
prephenology.c:					start of the new growth period, instead of the middle of
prephenology.c:					the new growth period, as is used in the White et al. ms. */
prephenology.c:					/* leaves never got turned on, this is a non-growth
prephenology.c:		the permanent phen struct arrays */
prephenology.c:				remdays_curgrowth[pday] = 0;
prephenology.c:				growth */
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:			} /* end if special no-growth signal */
prephenology.c:				/* normal growth year */
prephenology.c:				ngrowthdays = offday - onday;
prephenology.c:				if (ngrowthdays < 1)
prephenology.c:					bgc_printf(BV_ERROR, "FATAL ERROR: ngrowthdays < 1\n");
prephenology.c:					bgc_printf(BV_ERROR, "ngrowthdays = %d\n",ngrowthdays);
prephenology.c:				/* define the length of the transfer and litfall periods */
prephenology.c:				as proportions of number of growth days, as specified by user.
prephenology.c:				ngrowthdays */
prephenology.c:				t1 = epc->transfer_pdays * (double)ngrowthdays;
prephenology.c:				if (ntransferdays > ngrowthdays) ntransferdays = ngrowthdays;
prephenology.c:				t1 = epc->litfall_pdays * (double)ngrowthdays;
prephenology.c:				if (nlitfalldays > ngrowthdays) nlitfalldays = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:				counter = ngrowthdays;
prephenology.c:					remdays_curgrowth[pday] = counter;
prephenology.c:					remdays_curgrowth[pday] = 0;
prephenology.c:			} /* end else normal growth year */
prephenology.c:			right place in the permanent phen struct arrays */ 
prephenology.c:					year to the permanent phenology array */
prephenology.c:						phen->remdays_curgrowth[pday-182] = remdays_curgrowth[pday];
prephenology.c:					year to the permanent phenology array */
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:						phen->remdays_curgrowth[py*365-182+pday] = remdays_curgrowth[pday];
prephenology.c:					phen->remdays_curgrowth[py*365+pday] = remdays_curgrowth[pday];
prephenology.c:		} /* end phenyears loop for filling permanent arrays */
prephenology.c:	free(phen->remdays_curgrowth);
radtrans.c:	double swabs_per_plaisun, swabs_per_plaishade;
radtrans.c:	double parabs_per_plaisun, parabs_per_plaishade;
radtrans.c:	/* convert this to the shortwave absorbed per unit LAI in the sunlit and 
radtrans.c:		swabs_per_plaisun = swabs_plaisun/epv->plaisun;
radtrans.c:		swabs_per_plaishade = swabs_plaishade/epv->plaishade;
radtrans.c:		swabs_per_plaisun = swabs_per_plaishade = 0.0;
radtrans.c:	/* convert this to the PAR absorbed per unit LAI in the sunlit and 
radtrans.c:		parabs_per_plaisun = parabs_plaisun/epv->plaisun;
radtrans.c:		parabs_per_plaishade = parabs_plaishade/epv->plaishade;
radtrans.c:		parabs_per_plaisun = parabs_per_plaishade = 0.0;
radtrans.c:	metv->swabs_per_plaisun = swabs_per_plaisun;
radtrans.c:	metv->swabs_per_plaishade = swabs_per_plaishade;
radtrans.c:	unit conversion: W/m2 --> umol/m2/s. */
radtrans.c:	metv->ppfd_per_plaisun = parabs_per_plaisun * EPAR;
radtrans.c:	metv->ppfd_per_plaishade = parabs_per_plaishade * EPAR;
smooth.c:functions that perform smoothing on vectors
smooth.c:/* boxcar_smooth() performs a windowed smoothing on the input array, returns
snowmelt.c:	/* temperature and radiation snowmelt, 
snowmelt.c:	if (metv->tavg > 0.0)  /* temperature and radiaiton melt from snowpack */
soilpsi.c:	ws.soilw           (kg/m2) water mass per unit area
soilpsi.c:	ws.soilWobs	   (kg/m2) water mass per unit area from observation 
soilpsi.c:	   characteristics to the physical properties of soils.  Water Res.
soilpsi.c:	Alpha =0.027;//site60=0.027//site51= 0.05;//unit: m-1
soilpsi.c:	Theta_s =0.279;//site60=0.279//site51=0.278; //unit: m3/m3
soilpsi.c:	*psi = psi_temp2*0.01*9.8*1000/1000000; //units in MPa
state_update.c:	/* leaf and fine root transfer growth */
state_update.c:		/* Stem and coarse root transfer growth */
state_update.c:	/* Maintenance respiration fluxes */
state_update.c:	/* Daily allocation for transfer growth respiration */
state_update.c:	/* Daily growth respiration fluxes */
state_update.c:	/* Leaf growth respiration */
state_update.c:	/* Fine root growth respiration */
state_update.c:		/* Live stem growth respiration */ 
state_update.c:		/* Dead stem growth respiration */ 
state_update.c:		/* Live coarse root growth respiration */ 
state_update.c:		/* Dead coarse root growth respiration */ 
state_update.c:	/* Annual allocation fluxes, one day per year */
state_update.c:		allocation of excess C and N show up as new growth in the next growing
state_update.c:	/* Leaf and fine root transfer growth */
state_update.c:		/* Stem and coarse root transfer growth */
state_update.c:	/* Annual allocation fluxes, one day per year */
state_update.c:		allocation of excess C and N show up as new growth in the next growing
summary.c:	/* calculate daily NPP, positive for net growth */
